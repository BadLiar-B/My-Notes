之前接收请求用的是 http 模块或者 https 模块：
1、根据不同的请求路径、请求方法，做不同的事，处理起来比较麻烦
2、读取请求体和写入响应体是通过流的方式，比较麻烦

现在：使用第三方库：
Express（生态完整） 
Koa2 是一个新的 web 框架，由 Express 幕后的原班人马打造， 为搭建 web 服务器提供更轻量、更优雅的方案。
Egg（web 服务器框架）

一、Koa 对比 Express：
1、更轻量：在 express 的基础上进一步简化了框架
	比如优化了：koa 没有内置的中间件、koa 不提供路由匹配
2、更合理的对象结构：
	express 的主要操作对象有 app、req、res
	而在 Koa 中，它的主要操作对象有 app、context、request、response
3、更友好的中间件支持：
	Koa 最大的优势，就是它支持异步中间件，从而提供了基于合理的中间件模型
	中间件：对于服务器而言，它其实就是来处理一个又一个的请求， Web 服务器接收由浏览器发过来的一个又一个请求之后，它形成一个又一个的响应返回给浏览器.，而请求到达我们的服务器是需要经过程序处理的，程序处理完之后才会形成响应，返回给浏览器，我们服务器处理请求的这一块程序，在 Koa2 的世界当中就把它称之为中间件
	洋葱模型：对于每个中间件，在完成了一些事情后，可以非常优雅的将控制权传递给下一个中间件，并能够等待它完成，当后续的中间件完成处理后，控制权又回到了自己，这种中间件模型称之为 洋葱模型

	

二、Egg：
特点：
整合了后端技术，提供一站式开发体验
制定了一套规范，统一了开发模式
提供了各种插件，具备灵活的扩展能力
Convention Over Configuration，约定优于配置
内置多进程管理
使用 MV 模式

Egg 的应用场景：任何前端服务器都可以使用 Egg
如常见的：中间服务器、纯后端服务器

核心概念：约定
Egg 中使用了很多约定，包括对文件夹的约定、对文件名的约定等等，这些约定的存在，减少了大量的配置

运行流程：
生成配置：Egg 会在启动时读取 config 文件夹中的配置，以及 app/router.js 中的路由信息，然后将最终的配置生成到 run 文件夹中
启动egg：Egg 会在内部创建 Koa 实例，并作出适当的初始化工作，然后监听 7001 端口（默认）
匹配路由：Egg 在内部使用了 @koa/router，会根据路由表中请求的路径和方法，把请求交给指定的 action 进行处理
请求处理：Egg 遵循 MVC 模式，请求始终是交给 Controller 中的 Action 进行处理
	Controller 表现为一个类，继承自 Egg 中的 Controller
	Action 表现为一个 Controller 中的实例方法，用于处理请求










