一、自定义指令：
除了核心功能默认内置的指令（v-model 和 v-show），VUE 也允许注册自定义指令。
在 VUE2.0 中，代码复用和抽象的主要形式是组件。
然而，有的情况下，你仍然需要对普通DOM元素进行底层操作，这时候就会用到自定义指令。

1、vue2 注册全局自定义指令：
先创建拖拽自定义指令文件，directive/draggable.js，
将创建的自定义 js 文件引入 directive/index.js 并使用，
	import draggable from './draggable' //创建的拖拽自定义指令
	// 自定义指令
	const directives = {
		draggable
	} 
	export default {
		install (Vue) {
			Object.keys(directives).forEach((key) => {
				Vue.directive(key, directives[key])
			})
		}
	} 
在main.js 里引入 index 文件，在页面中直接使用 v-draggable 即可。
	import Directive from './directives/index'
	Vue.use(Directive)

2、vue3 注册全局自定义指令：
	const app = createApp(App);
 
	const hiddle = {
	  mounted(el, binding) {
	    el.handler = function (e) {
	      // 如果点击范围在绑定的元素范围内，那么将不执行指令操作，而是执行原点击事件
	      if (el.contains(e.target)) return
	      if (typeof binding.value.fn === 'function') {
	        // 绑定给指令的如果是一个函数，那么将回调并指定this
	        binding.value.fn.apply(this, arg)
	        document.removeEventListener('click', el.handler)
	      }
	    }
	    // 监听全局的点击事件
	    document.addEventListener('click', el.handler)
	  },
	  beforeMount(el) {
	    document.removeEventListener('click', el.handler)	
	  },
	} 
	app.directive('hide', hiddle);
在页面中直接使用 v-hide 即可。

3、Vue 2 和 Vue 3 在自定义指令上有一些差异：
注册方式：Vue 2 使用全局方法 Vue.directive() 注册自定义指令，而 Vue 3 使用应用实例的 app.directive() 方法注册自定义指令。

钩子函数名称：Vue 2 的自定义指令的钩子函数名称是固定的，例如 bind、inserted、update、componentUpdated 和 unbind。而 Vue 3 允许开发者自定义钩子函数名称，可以根据需要命名自定义指令的钩子函数。

钩子函数参数：Vue 2 的自定义指令的钩子函数参数包括 el、binding、vnode 和 oldVnode。而 Vue 3 的自定义指令的钩子函数参数有所变化，包括 el、binding、vnode、prevVnode 和 next。

钩子函数返回值：在 Vue 2 中，自定义指令的钩子函数可以返回一个对象，该对象将用于在指令的生命周期内与其他指令进行合并。而在 Vue 3 中，自定义指令的钩子函数不再支持返回对象。

钩子函数上下文：在 Vue 2 中，自定义指令的钩子函数中的 this 上下文指向绑定指令的元素。而在 Vue 3 中，自定义指令的钩子函数中的 this 上下文是 undefined，需要通过参数来获取相应的上下文信息。



二、钩子函数：
钩子函数是在一个事件触发的时候，在系统级捕获到了他，然后做一些操作。
一段用以处理系统消息的程序。“钩子”就是在某个阶段给你一个做某些处理的机会。

钩子函数： 1、是个函数，在系统消息触发时被系统调用。2、不是用户自己触发的。3、钩子函数的名称是确定的，当系统消息触发，自动会调用。
常见的钩子函数：vue 的生命周期函数，vue 的自定义指令等，React 的生命周期函数

1、vue2 钩子函数
bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。
inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。
update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。
componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。
unbind: 只调用一次， 指令与元素解绑时调用。

2、vue3 钩子函数
created：在绑定元素的 attribute 或事件监听器被应用之前调用。在指令需要附加在普通的 v-on 事件监听器调用前的事件监听器中时，这很有用
beforeMount：当指令第一次绑定到元素并且在挂载父组件之前调用
mounted：在绑定元素的父组件被挂载后调用，大部分自定义指令都写在这里
beforeUpdate：（新增钩子）在更新包含组件的 VNode 之前调用
updated：在包含组件的 VNode 及其子组件的 VNode 更新后调用
beforeUnmount：（新的钩子）在卸载绑定元素的父组件之前调用
unmounted：当指令与元素解除绑定且父组件已卸载时，只调用一次

钩子函数的参数：
回调参数有四个，含义基本上和 Vue2 一致：
el：指令所绑定的元素，可以用来直接操作 DOM，想实现一个可以自动判断组件显示还是隐藏的指令，那么就可以通过 el 对象来操作 DOM 节点，进而实现组件的隐藏。
binding：我们通过自定义指令传递的各种参数，主要存在于这个对象中，有如下属性：
	name：指令名，不包括 v- 前缀。
	value：指令的绑定值，例如：v-hasPermission="['user:delete']" 中，绑定值为 'user:delete'，不过需要小伙伴们注意的是，这个绑定值可以是数组也可以是普通对象，关键是看你具体绑定的是什么。
	expression：字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。
	arg：传给指令的参数，可选。例如 v-hasPermission:[name]="'zhangsan'" 中，参数为 "name"。
	modifiers: 一个包含修饰符的对象
vnode：Vue 编译生成的虚拟节点。
oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。




例：vue3 的例子
const usersPermissions = ['user'];
app.directive('hasPermission', {
    mounted(el, binding, vnode) {
        const {value} = binding;
        let f = usersPermissions.some(p => {
            return p.indexOf(value) !== -1;
        });
        if (!f) {
            el.parentNode && el.parentNode.removeChild(el);
        }
    }
})

usersPermissions 表示当前用户所具备的权限。
具体的逻辑很简单，先从 binding 中提取出 value 的值，这就是当前控件所需要的权限，然后遍历 usersPermissions 用一个 some 函数，去查看 usersPermissions 中是否有满足条件的值，如果没有，说明当前用户不具备展示该组件所需要的权限，那么就要隐藏这个组件，隐藏的方式就是获取到当前组件的父组件，然后从父组件中移除当前组件即可。
使用：<button @click="btnClick" v-hasPermission="['user:delete']">删除用户</button>








