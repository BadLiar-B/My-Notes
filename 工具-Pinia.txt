Pinia ：
是一个 Vue 阵营的新的状态管理库，现在 Vue 官方已经推荐使用 Pinia 来代替 Vuex，或者你可以把 Pinia 看作是 Vuex 的最新的版本。
Pinia 是一个西班牙语的单词，表示“菠萝”的意思。因为菠萝是由一小块一小块组成的，这个和 Pinia 的思想就非常的吻合，在 Pinia 中，每个 Store 仓库都是单独的扁平化的存在的。
Pinia 是由 Vue 官方团队中的一个成员开发的，最早是在 2019 年 11 左右作为一项实验性工作所提出的，当时的目的是将组合 API 融入到 Vuex 中，探索新版本的 Vuex 应有的形态，随着探索的进行，最终发现 Pinia 已经实现了 Vuex5 大部分的提案，因此 Pinia 就作为了最新版本的 Vuex，但是为了尊重作者本人，名字保持不变，仍然叫做 Pinia。

pinia 官网：https://pinia.vuejs.org/



一、Pinia 相比 Vuex 有什么样的优点 ？为什么现在官方推荐使用 Pinia ？
1、在 Pinia 中，已经不存在 mutations，只有 state、getters、actions
2、actions 里面支持同步和异步来修改 store，相当于将之前 Vuex 中的 mutation 和 action 合并了
3、可以和 TypeScript 一起使用，以此来获得类型推断的支持
4、关于 Store 仓库，每一个 Store 仓库都是独立的扁平化的存在的，不再像 Vuex 里面是通过 modules 嵌套
5、支持插件扩展，可以通过插件（函数）来扩展仓库的功能，为仓库添加全局属性或者全局方法
6、更加轻量，压缩之后体积只有 1kb 左右，基本上可以忽略这个库的存在




二、是否使用过 Pinia？简单谈一下 Pinia 的使用？
在 Pinia 中，核心概念有
	state：仓库的核心，主要是用于维护仓库的数据
	getters：用于对数据做二次计算的，等同于 store 的 state 的计算值
	actions ：对仓库状态进行操作的方法
相比 Vuex，Pinia 中没有 mutations，同步方法和异步方法都放在 actions 里面。Pinia 同时支持 Vue2 和 Vue3，内部支持两种编码风格，分别是：
	选项式 API ：编码风格基本就和之前的 Vuex 是相似的
	组合式 API ： 编码风格和 Vue3 非常相似，使用 ref 或者 reactive 来定义仓库数据，使用 computed 来做 getters，actions 里面的方法直接书写即可，最后将数据和方法通过 return 导出。




三、是否给 pinia 添加过插件？具体添加的方式是什么？
在 Pinia 中可以非常方便的添加插件。一个插件就是一个函数，该函数接收一个 context 上下文对象，通过 context 对象可以拿到诸如 store、app 等信息。
每个插件在扩展内容时，会对所有的仓库进行内容扩展，如果想要针对某一个仓库进行内容扩展，可以通过 context.store.$id 来指定某一个仓库来扩展内容。
插件书写完毕后，需要通过 pinia 实例对插件进行一个注册操作。
另外，我们还可以使用一些第三方插件，直接通过 npm 安装使用即可。安装完毕后，使用方法和自定义插件是一样的，具体的使用方法一定要参阅文档。




四、在目前的 Vue 应用中，使用状态管理库进行状态管理时有哪些最佳实践？请列举一至两条：
在使用 Vue 开发应用时，有关组件的状态管理这一块，有如下的最佳实践：
	使用专门的状态仓库来管理组件状态，以达到状态逻辑和业务逻辑的分离
	比起 Vuex，目前更推荐使用 Pinia 来管理仓库的状态
	尽量都集中使用 actions 中的方法来操作 store 的状态，避免直接操作 store
	使用 typescript 以便得到更好的类型提示
	根据不同的功能模块来创建对应的独立的状态仓库







