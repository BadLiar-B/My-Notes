一、数据代理的原理：
        通过 vm 直接操作内部 data 中的数据。 有了数据代码，可以简化代码书写。
        this._data.name  ====>   this.name
        通过 Object.defineProperty 给 vm 添加 data 中所有的数据。
        并设置 get 和 set 。在 getter 方法中，读取 data 中属性并返回。
        在 setter 方法，将最新的数据赋值给 data 中的数据。



二、Vue 组件 data 为什么必须是函数：
	因为 vue 组件是可以复用的 vue 实例，一个组件被创建好后，就可能被用在各个地方，而组件不管被复用了多少次，组件中的 data 数据都应该是相互隔离互不影响的，不会产生数据污染情况
	所以一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。
new Vue 的实例是不会被复用的,因此不存在以上问题。



三、vue 实现原理、 响应式原理：
vue2 采用的数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter、getter，在数据变动时发布消息给订阅者，触发响应的监听回调。
具体步骤：
1、需要 Observer（监听器） 的 数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter，这样的话，给这个对象的某个值赋值，就会触发 setter ,那么就能监听到数据的变换了。
2、Compiler （解析器）解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据发生变换，收到通知，更新视图。
Vue 的数据双向绑定整合了 Observer，Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 的数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化->视图更新，视图交互变化->数据 model 变更的双向绑定效果

vue3 通过 Proxy（代理）： 拦截对象中任意属性的变化，包括：属性值的读写，属性的增加，属性的删除等



