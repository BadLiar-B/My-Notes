一、闭包：可以理解成能够读取其他函数内部变量的函数

作用：1、可以读取函数内部的变量
          2、让这些变量的值始终保持在内存中

问题1：变量会保存在内存中，内存消耗大，造成网页的性能问题。
解决：在退出函数之前，将不使用的局部变量全部删除。
问题2：闭包会在父函数外部，改变父函数内部变量的值。
解决：把父函数当作对象使用，把闭包当作它的公用方法，把内部变量当作它的私有属性



二、内存泄漏
	前端的内存泄漏是指在网页或应用程序中，由于不正确的内存管理导致内存资源无法正常释放的情况。当内存泄漏发生时，系统中的可用内存逐渐减少，最终可能导致性能下降、页面卡顿或崩溃
	在前端开发中，使用的编程语言在运行时自动进行内存分配和释放。通常情况下，当不再需要某个变量或对象时，系统会自动回收其占用的内存空间。但是，如果在代码中存在一些问题，可能会导致内存资源无法被正确释放，从而造成内存泄漏。

常见的前端内存泄漏情况包括以下几个方面：
	1、无限制的引用：当一个对象被引用时，如果存在对该对象的引用但不再需要使用它，那么它仍然会被保留在内存中，无法被垃圾回收。这种情况可能发生在事件处理器、定时器或闭包等场景中，需要特别注意释放不再需要的引用。
	2、循环引用：如果存在多个对象之间的相互引用关系，并且这些对象之间都有至少一个引用仍然存在，那么就会形成循环引用。在这种情况下，即使外部代码不再引用这些对象，它们仍然被保留在内存中，无法被垃圾回收。常见的循环引用情况包括对象之间的相互引用、DOM 元素的事件处理器与 DOM 对象之间的相互引用等。
	3、未正确释放资源：例如在使用 AJAX 请求时，如果没有正确释放已经完成的请求或取消未完成的请求，可能会导致请求相关的资源无法释放，从而造成内存泄漏。
	4、缓存问题：如果过度缓存数据或长时间保留不再需要的缓存，可能会导致内存占用持续增加而不释放。


为了避免前端内存泄漏，开发者可以采取以下措施：
	1、确保及时释放不再需要的变量、对象和资源，避免无限制的引用。
	2、注意处理循环引用，避免形成闭环。
	3、使用合适的缓存策略，避免过度缓存或长时间保留不再需要的缓存。
	4、仔细管理事件处理器和定时器，确保在不需要时正确取消注册或清理。
	5、使用开发者工具进行内存分析和性能检测，及时发现和解决潜在的内存泄漏问题。



