一、computed 计算属性：只有依赖的属性值发生改变，才会重新计算
1、如果函数所依赖的属性没有发生变化，从缓存中读取
2、必须有 return 返回
3、定义的时候，要被定义为‘方法’，使用计算属性的时候，当普通的属性使用
4、仅支持同步
5、computed：{
	自定义计算属性：{
		get（）{return 结果}
		set（val）{   }
		}
	}



二、watch 监听器：每当监听的数据发生变化时，都会执行回调进行后续操作
1、watch 的函数名 必须 和 data 中的数据名一致
2、watch 中的函数有两个参数，（新，旧）
3、watch 中的函数是不需要调用的
4、支持异步
5、handler 函数：以对象和 handler 函数的方式来定义一个监听属性，handler就是处理监听变动时的函数：
	data : { username : ' ' }
	watch : {
		username :{    handler（newVal , oldVal）: ' doSomething' ；
		                      immediate: true,    },
	},
	methods :  { 
		doSomething(){ //当username发生变化时，做处理 } 
	}
6、immediate:true 页面首次加载的时候进行一次监听
7、deep：true：深度侦听
     （1）只会监听数据的值是否发生改变，而不会去监听数据的地址是否发生改变，
     （2）如果侦听的是一个对象，如果对象中的属性发生了变化，不会触发侦听器




三、computed 和 watch 区别：
1、属性：computed 是计算属性，
	watch 是监听，监听data中的数据变化，执行对应的回调
2、缓存：computed 支持缓存，当所依赖的属性不变的时候会调用缓存，当其依赖的属性的值发生变化时，计算属性会重新计算
               watch 不支持缓存，每次监听的属性值发生变化时，都会调用回调，响应执行
3、同步/异步：computed 不支持异步，有异步操作时无法监听数据变化
	       watch 支持异步操作
4、执行顺序：computed 第一次加载时就监听
	    watch 默认第一次加载时不监听
5、是否调用 return：computed中的函数必须调用return
		watch不是
6、使用场景：computed：一个属性受多个属性影响，如：购物车商品结算
	     watch：一个数据影响多条数据，如：搜索数据
当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算。
数据变化响应，执行异步操作，或高性能消耗的操作，应该使用 watch




四、watch 和 watchEffect 区别：
watch 是声明式的数据监视选项或函数，需要显式指定监视的数据和回调函数。
watchEffect 是一个自动追踪依赖的副作用函数，无需显式指定依赖项，它会自动检测函数内部使用的响应式数据，并在数据变化时重新运行。




五、computed 和 methods 有什么区别：
1、标准而浅显的回答：
	在使用时，computed 当做属性使用，而 methods 则当做方法调用
	computed 可以具有 getter 和 setter，因此可以赋值，而 methods 不行
	computed 无法接收多个参数，而 methods 可以
	computed 具有缓存，而 methods 没有

2、更接近底层原理的回答：	
	vue 对 methods 的处理比较简单，只需要遍历 methods 配置中的每个属性，将其对应的函数使用 bind 绑定当前组件实例后复制其引用到组件实例中即可。而 vue 对 computed 的处理会稍微复杂一些。

	当组件实例触发生命周期函数 beforeCreate 后，它会做一系列事情，其中就包括对 computed 的处理。它会遍历 computed 配置中的所有属性，为每一个属性创建一个 Watcher 对象，并传入一个函数，该函数的本质其实就是 computed 配置中的 getter，这样一来，getter 运行过程中就会收集依赖。

	但是和渲染函数不同，计算属性创建的 Watcher 不会立即执行，因为要考虑到该计算属性是否会被渲染函数使用，如果没有使用，就不会得到执行。因此，在创建 Watcher 的时候，它使用了 lazy 配置，lazy 配置可以让 Watcher 不会立即执行。
	受到 lazy 的影响，Watcher 内部会保存两个关键属性来实现缓存，一个是 value，一个是 dirty。
	value 属性用于保存 Watcher 运行的结果，受 lazy 的影响，该值在最开始是 undefined。
	dirty 属性用于指示当前的 value 是否已经过时了，即是否为脏值，受 lazy 的影响，该值在最开始是 true。
	Watcher 创建好后，vue 会使用代理模式，将计算属性挂载到组件实例中。

	当读取计算属性时，vue 检查其对应的 Watcher 是否是脏值，如果是 true，则运行函数，计算依赖，并得到对应的值，保存在 Watcher 的 value 中，然后设置 dirty 为 false，然后返回。如果 dirty 为 false，则直接返回 watcher的 value。

（巧妙的是，在依赖收集时，被依赖的数据不仅会收集到计算属性的 Watcher，还会收集到组件的 Watcher。
当计算属性的依赖变化时，会先触发计算属性的 Watcher 执行，此时，它只需设置 dirty 为 true 即可，不做任何处理。
由于依赖同时会收集到组件的 Watcher，因此组件会重新渲染，而重新渲染时又读取到了计算属性，由于计算属性目前已为 dirty，因此会重新运行 getter 进行运算。
而对于计算属性的 setter，则极其简单，当设置计算属性时，直接运行 setter 即可。）






