Promise 规范：
Promise 是一套专门处理异步场景的规范，它能有效的避免回调地狱的产生，使异步代码更加清晰、简洁、统一

是 commonJs 提出的一种规范，一种模式，可以帮忙管理异步返回的代码，有两种状态，等待（pending）完成（settled），完成状态又分为两类解决（resolved）和拒绝（rejected）

这套规范最早诞生于前端社区，规范名称为 Promise A+
Promise A+ 规定：
1、所有的异步场景，都可以看做是一个异步任务，每个异步任务在 JS 中应该表现为一个对象，该对象称之为 Promise 对象，也叫做任务对象。
2、每个任务对象，都应该有两个阶段 、三个状态
	两个阶段：未决阶段（unsettled）、已决阶段（settled）
	三个状态：挂起状态（pending）、完成状态（fulfilled）、失败状态（rejected）
3、任务：	挂起->完成，称之为 resolve ，任务完成时，可能有一个相关数据；
	挂起->失败，称之为 reject ，任务失败时，可能有一个失败原因。
4、可以针对任务进行后续处理，针对完成状态的后续处理称之为 onFulfilled，针对失败的后续处理称之为onRejected
 



Promise API：
ES6 提供了一套 API ， 实现了 Promise A+ 规范
示例：
// 创建一个任务对象，该任务立即进入 pending 状态
const pro = new Promise((resolve,reject)=>{
	//  任务的具体执行流程，该函数会立即执行
	// 调用 resolve（data），可将任务变为 fulfilled 状态，data 为需要传递的相关数据
	// 调用 reject（reason），可将任务变成 rejected 状态，reason 为需要传递的失败原因
})
pro.then(
	(data)=>{	// onFulfilled 函数，当任务完成后，会自动运行该函数，data 为任务完成的相关数据}，
	(reason)=>{// onRejected 函数，当任务失败后，会自动运行该函数，reason 为任务失败的相关原因	}
)
也可以写成：pro.then(成功处理).catch(失败处理)




Promise 的静态方法：
Promise.resolve(data)	直接返回一个完成状态的任务
Promise.reject(reason)	直接返回一个拒绝状态的任务
Promise.all(任务数组)		返回一个任务，任务数组全部成功则成功，任何一个失败则失败
Promise.any(任务数组)	返回一个任务，任务数组任一成功则成功，任务全部失败则失败
Promise.allSettled(任务数组)	返回一个任务，任务数组全部已决则成功，该任务不会失败
Promise.race(任务数组)	返回一个任务，任务数组任一已决则已决，状态和其一致





消除回调：
有了 Promise ，异步任务就有了一种统一的处理方式
有了统一的处理方式， ES 官方就可以对其进一步优化
ES7（2016年）推出了两个关键字 async 和 await ，用于更加优雅的表达 Promise
async 关键字 用于修饰函数，被它修饰的函数，一定返回 Promise
await 关键字 表示等待某个 Promise 完成，他必须用于 async 函数中

	async/await 是基于 Promise 实现的，它不能用于普通的回调函数
	async/await 与 Promise 一样，是非阻塞的
	async/await 使得异步代码看起来像同步代码




 