一、WebGL 产生背景：
	WebGL 是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加OpenGL ES 2.0 的一个 JavaScrip t绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示 3D 场景和模型了，还能创建复杂的导航和数据视觉化。显然，WebGL技术标准免去了开发网页专用渲染插件的麻烦，可被用于创建具有复杂3D结构的网站页面，甚至可以用来设计3D网页游戏等等。

二、WebGL 概念（Web图形库）：
1、是一种 JavaScript API（函数库）
2、WebGL 是用来实现 2d 3d 动画效果的
3、WebGL 是完全集成到浏览器的所有网页标准中， 可以与 canvas 结合使用， 他是由 GPU 加速渲染的
4、WebGL 的代码 是由 javascript + GLSL（着色器） 组合而成
着色器（OpenGL Shading Lanugage）： 绘制图形的语言  类似c语言、c++语言

三、WebGL 的工作原理：
可绘制的图元：点、线段、三角形
	webgl 的工作方式和流水线类似，将一个绘图过程分成了多个步骤，当前步骤只对前一步骤打的结果进行处理，然后将处理后的结果传递给下一个步骤，最终渲染到 2d 屏幕上， 业界把这周渲染方式称之为 图形管线 或者 渲染管线。
GPU渲染管线的主要处理过程：
1、首先进入顶点着色器阶段，利用GPU的并行计算优势对顶点逐个进行坐标变换
2、然后进入图源装配阶段，将顶点按照图源类型组装成图形。
3、接下来到光栅化阶段，光栅化阶段将图形用不包含颜色信息的像素填充
4、在之后进入片元着色器阶段，该阶段为像素着色器，并最终显示在屏幕上

四、openGL：
一种兼容多种语言使用的开放式图形化语言。用于制作 2d 或 3d 图形的 API。
改语言类似于 C 或 C++，并在计算机的图形处理器（GPU）上运行

五、WebGL 优点：
1、只需要一个编辑器和一个浏览器就可以编写三维图形程序（内嵌在浏览器中，不需要安装任何插件即可运行）
2、使用通用的web技术发布三维图形程序显示
3、充分利用了浏览器的功能
4、资料丰富
https://webglfundamentals.org/webgl/lessons/zh_cn/



一、WebGL 绘图流程
1、获取 WebGL 绘图上下文：var gl = canvas.getContext('webgl');
2、初始化着色器：
	顶点着色器：用来描述 顶点特征 的程序，通过计算获取位置信息（可以理解为一个个坐标）
		内置变量：vec4 gl_Position 表示顶点位置
			float gl_PointSize 表示点的尺寸（像素数）
	片元着色器：进行逐片元处理过程，通过计算获取颜色信息，如光照的程序（片元可以理解为一个个像素）
		内置变量：vec4 gl_FragColor 指定片元颜色
	着色器工作流程：我们的着色器程序，其实是以字符串的形式存放在JavaScript里面，它的源程序其实是通过JavaScript字符串来完成的。JavaScript读取到着色器的信息，传递给webgl，webgl通过一系列的操作抓取到着色器的内容，计算出顶点和片元信息，之后通过绘制程序绘制到浏览器上。
3、设置点的坐标信息
4、设置 <canvas> 背景色
5、清空 <canvas>
6、绘制

（一）、声明方式（存储限定符）着色器变量的声明方式：
例：attribute 	vec4 	a_Position
（存储限定符 	类型 	变量名）
1、attribute 变量：传输的是与顶点有关的数据：
2、uniform 变量：传输的是对于所有顶点都相关（或与顶点无关）的数据（全局变量）
3、textures 变量：纹理（纹理是一个数据序列，可以在着色程序运行中随意读取其中的数据。 大多数情况存放的是图像数据，但是纹理仅仅是数据序列， 你也可以随意存放除了颜色数据以外的其它数据。）
4、varying 可变变量：可变量是一种顶点着色器给片断着色器传值的方式，依照渲染的图元是点， 线还是三角形，顶点着色器中设置的可变量会在片断着色器运行中获取不同的插值。

（二）、GLSL ES 数据类型：
类别	类型			描述
矢量	vec2、vec3、vec4		具有2/3/4个浮点数元素的矢量
	ivec2、ivec3、ivec4		具有2/3/4个整形元素的矢量
	bvec2、bvec3、bvec4	具有2/3/4个布尔值元素的矢量
矩阵	mat2、mat3、mat4		2*2、3*3、4*4的浮点数元素的矩阵（分别具有4,9,16个元素）

（三）、设置精度
	在片元着色器中如果想使用矢量或者浮点数的时候，需要先设置它的精度。在顶点着色器使用矢量的时候，它会指定默认的精度为高精度，但是在片元着色器并没有指定它的默认精度，需要自己手动设置。
可以通过precision mediump float;进行设置，它的意思是指定精度为中精度。它们的精度值分别为：
1、高精度：highp
2、中精度：mediump
3、低精度：lowp


二、WebGL 常用API：
创建着色器：gl.createShader(type)；type: gl.VERTEX_SHADER / gl.FRAGMENT_SHADER;
向着色器中添加资源：gl.shaderSource(shader, source)；shader：着色器、source：添加的程序（字符串类型）
编译着色器代码：gl.compileShader(shader)；shader 要编译的着色器

创建程序：gl.createProgram()；
绑定着色器程序：gl.attachShader(program, shader)；program：被插入的程序、shader：要绑定的着色器
连接着色器程序：gl.linkProgram(program)；

获取 attribute 存储位置：gl.getAttribLocation(program, name)； 如果不存在该变量或者该变量名为保留字 则返回-1
获取 uniform 存储位置：gl.getUniformLocation(program, name)； 如果不存在该变量或者该变量名为保留字则返回 null

向 attribute 变量赋值： gl.vertexAttrib3f(location, v0, v1, v2)； location：将要修改的 attribute 变量的存储位置、v：指定填充 attribute 变量第一 二 三个分量的值
向 uniform 变量赋值：gl.uniform4f(location, v0, v1, v2, v3)； location：将要修改的 uniform 变量的存储位置、v：指定填充 attribute 变量第一 二 三 四个分量的值

绘制图像：mode：gl.POINTS（点）、gl.LINES（线段）、gl.LINE_STRIP（线条）、gl.LINE_LOOP（回路）、gl.TRIANGLES（三角形）、gl.TRIANGLE_STRIP（三角带）、gl.TRIANGLE_FAN（三角扇）
	gl.drawArrays(mode, first, count)；mode：指定绘制图元的类型、first：指定从哪个顶点开始绘制（整型数）、count：指定绘制需要用到多少个顶点（整型数）
	gl.drawArrays(mode, count, type, offest)；mode：指定绘制图元的类型、count：指定绘制需要用到多少个顶点（整型数）、type：指定索引缓冲区的值的类型，常用的值有两个：gl.UNSIGNED_BYTE(无符号8位整数值)和gl.UNSIGNED_SHORT（无符号短整型16位）、offset：指定索引数组中开始绘制的位置，以字节为单位
	
创建/删除 缓冲区对象：gl.createBuffer()、gl.deleteBuffer(buffer)；buffer：待删除的缓冲区对象
将缓冲区对象绑定到 WebGL 系统中的目标上：gl.bindBuffer(target, buffer)；target：gl.ARRAY_BUFFER 或 gl.ELEMENT_ARRAY_BUFFER、buffer：指定之前由 gl.createBuffer() 返回的待绑定的缓冲区对象
向缓冲区中写入数据：gl.bufferData(target, data, usage)；target：gl.ARRAY_BUFFER 或 gl.ELEMENT_ARRAY_BUFFER、data：写入缓冲区对象的数据、usage：表示程序将如何使用存储在缓冲区对象的数据。





