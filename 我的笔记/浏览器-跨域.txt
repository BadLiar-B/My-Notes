一、跨域
	浏览器为了安全起见推出了同源策略（协议，域名，端口号三者完全一样就是同源，否则就是跨域）。
	它为了保证用户信息的安全，防止恶意的网站窃取数据。
	如果非同源，获取不到cookie，localstorage，不能获取dom，不能发送ajax
	因为现在开发的项目都是前后端完全分离(前端有自己的服务器，如：vue脚手架服务器，同时还有服务器端服务器)的项目，必然存在跨域问题
	浏览器中的大部分内容都是受同源策略限制的，但是以下三个标签可以不受限制：img、script、link


二、解决跨域
      （1）配置代理服务器 proxy
	因为服务器与服务器之间没有跨域问题，我们可以在 vue.config.js 文件里面配置代理服务器进行跨域。

      （2 ）JSONP 是 JSON with Padding（填充式json）的简写，JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数，而数据就是传入回调函数中的 JSON 数据，通过 script 标签引入一个 js 文件，这个 js 文件载入成功后会执行我们在 url 参数中指定的函数，并且会把我们需要的 json 数据作为参数传入。
	所以 jsonp 是需要服务器端的页面进行相应的配合的。在 js 中，我们直接用 XMLHttpRequest 请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp 正是利用这个特性来实现的。
     	JSONP 只能实现 GET 请求，而 CORS 支持所有类型的 HTTP 请求；

     （3）script元素的 src 属性处理
	iframe、img、style、script 等元素的src属性可以直接向不同域请求资源，jsonp正是利用 script 标签跨域请求资源的简单实现，所以这个和 jsonp 本质一样，同样需要服务端请求返回 callback... 形式。

    （4）跨域资源共享（CORS）插件
	后台使用 CORS 解决跨域，存在风险，容易被人恶意攻击
	跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。 CORS 背后的基本思想就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通从而决定请求或响应是应该成功还是失败。服务器端对于 CORS 的支持，主要就是通过设置 Access-Control-Allow-Origin 来进行的。如果浏览器检测到相应的设置，就可以允许 Ajax 进行跨域的访问。只需要在后台中加上响应头来允许域请求！在被请求的 Response header 中加入以下设置，就可以实现跨域访问了！

    （5） WebSocket：WebSocket协议不受同源策略限制，可以在不同源之间进⾏双向通信。





