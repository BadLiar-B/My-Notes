请阐述一下 v-model 的原理：

v-model 本质就是：value + input 方法的语法糖。可以通过 model 属性的 prop 和 event 属性来进行自定义。
原生的 v-model，会根据标签的不同生成不同的事件和属性。
例如：	text 和 textarea 元素使用 value 属性和 input 事件
	checkbox 和 radio 使用 checked 属性和 change 事件
	select 字段将 value 作为 prop 并将 change 作为事件



双向绑定的原理，其实现思路如下：
	首先要对数据进行劫持监听，所以我们需要设置一个监听器 Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者 Watcher 看是否需要更新。
	订阅者 Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。
	因为订阅者是有很多个，所以我们需要有一个消息订阅器 Dep 来专门收集这些订阅者，然后在监听器 Observer 和订阅者 Watcher 之间进行统一管理的。
	接着，我们还需要有一个指令解析器 Compile，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者 Watcher 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。



v-model 也可作用于自定义组件，当其作用于自定义组件时，默认情况下，它会生成一个value属性和input事件。

<Comp v-model="data" />
<!-- 等效于 -->
<Comp :value="data" @input="data=$event" />
开发者可以通过组件的 model 配置来改变生成的属性和事件

// Comp
const Comp = {
  model: {
    prop: "number", // 默认为 value
    event: "change" // 默认为 input
  }
  // ...
}
<Comp v-model="data" />
<!-- 等效于 -->
<Comp :number="data" @change="data=$event" />