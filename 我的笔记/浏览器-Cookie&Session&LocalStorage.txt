一、Cookie 和 Session 的区别：
1、安全性： Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。
2、存取值的类型不同：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。
3、有效期不同： Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。
4、存储大小不同： 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。
（消除 session：
1、过期时间：当客户端长时间没有传递 sessionid 过来时，服务器可以在过期时间之后自动清除 session
2、客户端主动通知：可以使用 JS 监听客户端页面关闭或其他退出操作，然后通知服务器清除 session）



二、Cookie 和 LocalStorage 的区别：
1、安全性：Cookie 的安全性较低，因为 Cookie 在每次 HTTP 请求中都会自动发送到服务器,存在被窃取或篡改的风险。而 LocalStorage 的数据仅在浏览器端存储，不会自动发送到服务器，相对而言更安全一些。
2、数据发送：Cookie 在每次 HTTP 请求中都会自动发送到服务器，这使得 Cookie 适合用于在客户端和服务器之间传递数据。而 localStorage 的数据不会自动发送到服务器，它仅在浏览器端存储数据，因此 LocalStorage 适合用于在同一域名下的不同页面之间共享数据。
3、生命周期：Cookie 可以设置一个过期时间，使得数据在指定时间后自动过期。而 LocalStorage 的数据将永久存储在浏览器中,除非通过 JavaScript 代码手动删除。
4、存储容量：Cookie 的存储容量通常较小，每个 Cookie 的大小限制在几 KB 左右。而 LocalStorage 的存储容量通常较大，一般限制在几 MB 左右。因此，如果需要存储大量数据，LocalStorage 通常更适合。


三、sessionStorage 和 localStorage的区别：
HTML5 新增了 sessionStorage 和 localStorage，前者用于保存会话级别的数据，后者用于更持久的保存数据。浏览器针对它们没有任何默认行为，这样一来，就把保存数据读取数据的工作交给了前端开发者，这就让恶意攻击者难以针对登录状态进行攻击。cookie 会与 domain（域）、path 关联，而 sessionStorage 和 localStorage ，只与 domain 关联
 



客户端怎么设置跨域携带 cookie
1、「前端请求」时在 request 对象中，配置 "withCredentials": true；
2、「服务端」在 response 的 header 中，
	配置 "Access-Control-Allow-Origin", "http://xxx:${port}";
	配置 "Access-Control-Allow-Credentials", "true"`




本地存储大容量
1、IndexDB:是浏览器中存储「结构化数据」的一个方案
	IndexedDB 是类似于 MySQL 或 Web SQL Database 的「数据库」
2、WebSQL: 用于存储较大量数据的缓存机制。
	「已废弃并且被IndexDB所替代」
3、Application Cache:允许浏览器通过manifest配置文件在本地「有选择」的存储JS/CSS/图片等静态资源的文件级缓存机制
	已废弃并且被ServerWorkers所替代
4、ServerWorkers：离线缓存














