一、兼容低版本浏览器
分为三个部分来说：
1、HTML
低版本浏览器无法识别新增的 HTML5 元素，如果要兼容这部分浏览器，需要做以下处理：
	对于非可替换元素，比如 article、section、header、footer 等，这种元素虽然低版本浏览器不识别，但它仍然会把它们渲染出来，只是没有浏览器的默认样式。因此，我们只需要在 css 中稍作处理即可，比如给它们都加上 display:block。
	对于可替换元素，比如 video、audio 等，这种元素会涉及低版本浏览器没有功能，因此需要使用条件注释，在低版本浏览器中使用兼容的做法

2、CSS
对于 CSS 代码，低版本浏览器可能无法识别某些 CSS 属性，比如圆角边框、背景渐变、过渡动画等。但由于浏览器对于不能识别样式的处理方式是：直接丢弃、不影响后续渲染，所以，我们可以保持这样的原则：尽量让其兼容，实在不行，至少不影响浏览。按照这样的原则，我们可以对 CSS 进行以下处理：
	使用厂商前缀，尽量让其兼容。
	对于某些样式使用 JS 替代，比如渐变、动画等

3、JavaScript
对于 JS 代码，低版本浏览器无法识别 H5 的 API，因此缺少了一些新功能，比如 localstorage、web worker 等。不仅如此，低版本浏览器还无法识别 ES6 的新语法，比如 let、const、async、await 等。因此，要处理 JS 的兼容性问题，只能具体情况具体分析，通常，我们会使用下面两种手段来完成兼容：
	模拟 API：就是自己写一个功能完全和官方相同的 API，来弥补低版本浏览器 API 没有的情况。比较典型的就是 ES5 中有大量的数组 API，这些 API 都是可以轻松模拟的。
	编译：某些新语法是无法模拟的，只能通过制作工具对源代码进行编译，将其新语法全部去掉，如果新语法涉及特殊功能，则转换为使用 API 完成，比较典型的例子就是 async 和 await 会被转换为 generator 的函数调用。

在前端工程化的今天，上面的几乎所有兼容性问题都可以依靠工程化完成，比如，css 可以依托 postcss 平台完成兼容性处理，JS 可以依托 babel 平台完成兼容性处理。



二、各个浏览器兼容前缀：
前缀	浏览器
-moz-	firefox
-webkit-	chrome、safari
-o-	opera
-ms-	IE






