一、this 的指向：
通过对象调用函数，this 指向这个对象
全局作用域下的 this 指向全局对象（window）
直接调用函数，this 指向全局对象（window）
定时器中函数的 this 指向全局对象（window）
自执行函数中的 this 永远指向全局对象（window）

如果通过 new 调用函数，this 指向新创建的对象（构造函数中的 this 指向当前的实例）
如果通过 apply call bind 调用函数，this 指向指定的数据
如果是 DOM 事件函数，this 指向事件源
箭头函数中没有 this，如果输出 this，就会输出箭头函数定义时所在的作用域中的 this



改变 this 的指向有以下几种方法：
•使用 ES6 的 箭头函数
•在函数内部使用 _this = this
•使用 apply、call、bind
•new 实例化一个对象





二、箭头函数与普通函数的区别：
1、外形不同。箭头函数使用箭头定义，普通函数中没有
2、普通函数可以有匿名函数，也可以有具体名函数，但是箭头函数都是匿名函数。
3、箭头函数不能用于构造函数，不能使用 new，普通函数可以用于构造函数，以此创建对象实例。
4、箭头函数中 this 的指向不同，在普通函数中，this 总是指向调用它的对象，如果用作构造函数，this 指向创建的对象实例。 箭头函数本身不创建 this，也可以说箭头函数本身没有 this，但是它在声明时可以捕获其所在上下文的 this 供自己使用。
5、每一个普通函数调用后都具有一个 arguments 对象，用来存储实际传递的参数。但是箭头函数并没有此对象。取而代之用 rest 参数来解决。
6、箭头函数不能用于 Generator 函数，不能使用 yeild 关键字。
7、箭头函数不具有 prototype 原型对象。而普通函数具有 prototype 原型对象。
8、箭头函数不具有 super。箭头函数不具有 new.target。




call、apply、bind 区别：
call、apply 是修改函数的作用域（修改 this 指向），并且立即执行，而bind是返回了一个新的函数，不是立即执行。
apply 和 call 的区别是 apply 接受数组作为参数，而 call 是接受逗号分隔的无限多个参数列表。



