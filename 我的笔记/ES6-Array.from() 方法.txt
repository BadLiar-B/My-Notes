Array.from() 方法详解
	1、将类数组对象转换为真正数组
		let arrayLike = { 0:"tom" , 1:"65" , 2:"男" , 3:['jane','john'] , 'length':4 }
		let arr = Array.from(arrayLike)
		console.log(arr)  // ['tom' , '65' , '男' , ['jane','john'] ]
     	  注：1、该类数组对象必须具有 length 属性，用于指定数组的长度。
		如果没有 length 属性，那么转换后的数组是一个空数组。
       　	　     2、该类数组对象的属性名必须为数值型或字符串型的数字

	2、将Set结构的数据转换为真正的数组
		let arr = [12,45,96]
		let set = new Set(arr)
		console.log(set) // Set(3) {12, 45, 96}
		console.log(Array.from(set)) // [12, 45, 96]
		// 可以接收第二个参数，类似于数组的map方法，用来对每个元素进行处理
		console.log(Array.from(set , item=> item+1)) // [13, 46, 97]

	3、将字符串转换为数组
		如上



Array.from() 方法妙用
	1、数组去重合并
		function combine() {
			let arr = [ ].concat.apply([ ], arguments);
			return Array.from(new Set(arr));
		}

		var m = [1, 2, 2], n = [2, 3, 3, 4],	o = [4, 5, 6];
		console.log(combine(m, n, o)); // [1, 2, 3, 4, 5, 6]

	2、序列生成器（指定范围）
		const range = (start, stop, step) =>
			Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step);
		console.log(range(0, 4, 1)); // [0, 1, 2, 3, 4]
		console.log(range(1, 10, 2)); // [1, 3, 5, 7, 9]
		console.log(range('A'.charCodeAt(0), 'Z'.charCodeAt(0), 3).map(x=>String.fromCharCode(x))); 
		// ['A', 'D', 'G', 'J', 'M', 'P', 'S', 'V', 'Y']









