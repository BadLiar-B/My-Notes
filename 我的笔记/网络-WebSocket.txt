一、WebSocket 协议是什么，能简述一下吗？
	WebSocket 协议 HTML5 带来的新协议，相对于 http，它是一个持久连接的协议，它利用 http 协议完成握手，然后通过 TCP 连接通道发送消息，使用 WebSocket 协议可以实现服务器主动推送消息。
	WebSocket 握手：
	首先，客户端若要发起 WebSocket 连接，首先必须向服务器发送 http 请求以完成握手，请求行中的 path 需要使用 ws 开头的地址，请求头中要分别加入upgrade、connection、Sec-WebSocket-Key、Sec-WebSocket-Version标记。
	然后，服务器收到请求后，发现这是一个 websocket 协议的握手请求，于是响应行中包含Switching Protocols，同时响应头中包含upgrade、connection、Sec-WebSocket-Accept 标记。
	当客户端收到响应后即可完成握手，随后使用建立的 TCP 连接直接发送和接收消息。



二、WebSocket 与传统的 http 有什么优势？
当页面中需要观察实时数据的变化（比如聊天、k 线图）时，过去我们往往使用两种方式完成
第一种是短轮询，即客户端每隔一段时间就向服务器发送消息，询问有没有新的数据
第二种是长轮询，发起一次请求询问服务器，服务器可以将该请求挂起，等到有新消息时再进行响应。响应后，客户端立即又发起一次请求，重复整个流程。
无论是哪一种方式，都暴露了 http 协议的弱点，即响应必须在请求之后发生，服务器是被动的，无法主动推送消息。而让客户端不断的发起请求又白白的占用了资源。
WebSocket 的出现就是为了解决这个问题，它利用 http 协议完成握手之后，就可以与服务器建立持久的连接，服务器可以在任何需要的时候，主动推送消息给客户端，这样占用的资源最少，同时实时性也最高。



三、前端如何实现即时通讯？
短轮询。即客户端每隔一段时间就向服务器发送消息，询问有没有新的数据
长轮询，发起一次请求询问服务器，服务器可以将该请求挂起，等到有新消息时再进行响应。响应后，客户端立即又发起一次请求，重复整个流程。
websocket，握手完毕后会建立持久性的连接通道，随后服务器可以在任何时候推送新消息给客户端




