ref( )
使用 ref 创建一个数据类型，ref 有 value 这个属性（vue3 响应式的数据）

==> 扩展开始
reactive( )
reactive 创建的响应式复杂数据对象，类似 VUE2 的 data 属性，在对象属性发生变化时，模版是可以响应更新渲染的
ref 和 reactive 区别:
ref->单一数据类型，有 value 属性；
reactive->复杂数据类型，无 value 属性；
==> 扩展结束

isRef( )
判断某个数据是否为 ref 创建的数据，是否是一个 ref 对象

unref( )
对 ref 内的值进行解析，如果是 ref 则返回 ref.value 的值，不是则返回传入的对象
等同于：isRef(val) ? val.value : val

toRef( )
针对对象内的单个属性进行转化，得到一个响应式对象某个属性的 ref 格式

toRefs( )
针对对象内的整个对象进行转化，把一个响应式对象的所有属性转换为 ref 格式，然后包装到一个 plain-object 中返回



ref 和 toRef 区别:
ref->复制, 修改响应式数据不会影响原始数据
toRef->引用, 修改响应式数据会影响原始数据
ref->数据发生改变, 界面就会自动更新
toRef->数据发生改变, 界面也不会自动更新


降低心智负担：
所有的 composition function 均以 ref 的结果返回，以保证 setup 函数的返回结果中不包含 reactive 或 readonly 直接产生的数据



--------------------------------------------------------------------------



ref 的作用是被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。

Vue this.$refs 的使用：
ref 写在标签上时：this.$refs.名字  获取的是  标签对应的 dom 元素
ref 写在组件上时：这时获取到的是  子组件(比如 counter )的引用

所以常见的使用场景有：
> 1. 基本用法，本页面获取 *DOM* 元素
> 2. 获取子组件中的 *data*
> 3. 调用子组件中的方法



