一、什么是 Vue.nextTick（）	=>   Vue 的核心方法之一
1、定义：官方文档解释如下：在下次 DOM 更新循环之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。所以就衍生出了这个获取更新后的 DOM 的 Vue 方法。所以放在 Vue.nextTick（）回调函数中的执行的应该是会对 DOM 进行操作的 JS 代码。

2、理解：nextTick（），是将回调函数延迟在下一次 DOM 更新数据后调用，简单的理解是：当数据更新了，在 DOM 中渲染后，自动执行该函数。

3、注意：Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调函数中获取更新后的 DOM 


二、什么时候需要用到 Vue.nextTick（）
1、Vue 生命周期的 created（）钩子函数进行的DOM操作一定要放在 Vue.nextTick（）的回调函数中，原因是在 created（）钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 JS 代码放进 Vue.nextTick（）的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载已完成。

2、当项目中你想在改变 DOM 元素的数据后基于新的 DOM 做点什么，对新 DOM 的一系列的 JS 操作做都需要放进 Vue.nextTick（）的回调函数中。通俗的理解是：更改数据后当你想立即使用js操作新的视图的时候需要使用它。
正确的用法是：Vue 改变 DOM 元素结构后使用 Vue.nextTick（）方法来实现 DOM 数据更新后延迟执行后续代码

3、在使用某个第三方插件时，希望在 vue 生成的某些 DOM 动态发生变化时重新应用该插件，也会用到该方法，这时候就需要在 $nextTick 的回调函数中执行重新应用插件的方法。


三、Vue.nextTick（callback）使用原理：（同 问题：vue 的数据为什么频繁变化但只会更新一次？）
原因是，Vue 是异步执行 DOM 更新的，一旦观察到数据变化，Vue 就会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。如果这个 watcher 被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和 DOM 操作。而在下一个事件循环时，Vue 会清空队列，并进行必要的 DOM 更新。

当你设置 vm.someData = 'new value'，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用Vue.nextTick（callback）。这样回调函数在 DOM 更新完成后就会调用。


四、总结
Vue 的 nextTick 其本质上是对 JS 执行原理 EventLoop 的一种应用

nextTick 的核心应用: Promise、MutationObserver、setlmmediate、setTimeout 的原生 JS 的方法来模拟对应的微/宏任务的实现，本质时是为了利用JS的这些异步回调任务队列来实现Vue框架中自己的异步回调队列

nextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时的后续逻辑处理

nextTick 是典型的将底层 JS 执行原理应用到具体案例中的示例

引入异步更新队列机制的原因



