jQuery：
让操作 DOM 变得更容易
官网：https://jquery.cuishifeng.cn/

jQuery 函数
名称为 jQuery，也可以写作 $ ，该函数提供了强大的 DOM 控制能力，示例：
const container = $(".container")	// 获取类样式为container的所有DOM
container.nextAll(".list");	// 获取container后面的兄弟元素，元素类样式必须包含list
container.remove();		// 删除元素
$(".list li").addClass("item");	// 找到所有类样式为list元素的后代li元素，给它们加上类样式item
$("p").css({ "color": "#ff0011", "background": "blue" });	// 为所有p元素添加一些style
$(function(){  // ... })		// 注册DOMContentLoaded事件
$("li").click(function(){  // ... }	// 给所有li元素注册点击事件
$("<a>").text("link").appendTo(".list");	// 创建一个a元素，设置其内容为link，然后将它作为子元素追加到类样式为.list的元素中	

jQuery 对象和 DOM 对象
通过jQuery得到的元素是一个jQuery对象，而不是传统的DOM，jQuery对象是一个伪数组
jQuery对象和DOM之间可以互相转换，例如：
// jQuery -> DOM：
jQuery对象[索引] 或者 jQuery对象.get(索引)
// DOM -> jQuery：
$(DOM对象)



Lodash：
是一个针对 ES 的古老工具库，它出现在 ES5 之前
Lodash 提供了大量的 API，弥补了 ES 中对象、函数、数组 API 不足的问题
官网：https://www.lodashjs.com/



Animate.css：
Animate.css 库提供了大量的动画效果，开发者仅需使用它提供的类名即可
示例：class="animate__animated animate__效果名"
注意：animate.css中的动画对行盒无效
官网：https://animate.style/



Axios：
是一个请求库，在浏览器环境中，它封装了XHR，提供更加便捷的API发送请求
官网：https://axios-http.com/zh/

axios 的基本用法为：
axios.get(url地址, [请求配置]);
axios.post(url地址, [请求体对象], [请求配置]);
// 或直接使用 axios 方法，在请求配置中填写请求方法
axios(请求配置);
例：
// 发送 get 请求到 https://study.com/api/list，输出响应体的内容
axios.get("https://study.com/api/list").then(resp=>{
  console.log(resp.data); // resp.data 为响应体的数据，axios会自动解析JSON格式
})
// 发送 get 请求到 https://study.com/api/user/exists，输出响应体的内容
axios.get("https://study.com/api/user/exists", {
  params: {
    loginId: "abc"
  },
}).then(resp=>{
  console.log(resp.data); // resp.data 为响应体的数据，axios会自动解析JSON格式
})
// 发送 post 请求到 https://study.com/api/user/reg
// axios 会将第二个参数转换为JSON格式的请求体
axios.post("https://study.com/api/user/reg", {
  loginId: 'abc',
  loginPwd: '123123',
  nickname: '棒棒鸡'
}).then(resp=>{
  console.log(resp.data); // resp.data 为响应体的数据，axios会自动解析JSON格式
})

实例
axios允许开发者先创建一个实例，后续通过使用实例进行请求，这样做的好处是可以预先进行某些配置
示例：
// 创建实例
const instance = axios.create({
  baseURL: 'https://study.com/'
});
// 发送 get 请求到 https://study.com/api/herolist，输出响应体的内容
instance.get("/api/herolist").then(resp=>{
  console.log(resp.data); // resp.data 为响应体的数据，axios会自动解析JSON格式
})

拦截器
有时，我们可能需要对所有的请求或响应做一些统一的处理
比如，在请求时，如果发现本地有token，需要附带到请求头
又比如，在拿到响应后，我们仅需要取响应体中的data属性
再比如，如果发生错误，我们需要做一个弹窗显示
这些统一的行为就非常适合使用拦截器，拦截器可以针对axios实例进行设置
示例：
// 添加 请求拦截器
axios.interceptors.request.use(function (config) {
  // config 为当前的请求配置
  // 在发送请求之前做些什么
  // 这里，我们添加一个请求头
  const token = localStorage.getItem('token');
  if(token){
    config.headers.authorization = token;
  }
  return config; // 返回处理后的配置
});
// 添加 响应拦截器
axios.interceptors.response.use(function (resp) {
  // 2xx 范围内的状态码都会触发该函数。
  // 对响应数据做点什么
  return resp.data.data; // 仅得到响应体中的data属性
}, function (error) {
  // 超出 2xx 范围的状态码都会触发该函数。
  // 对响应错误做点什么
  alert(error.message); // 弹出错误消息
});
设置好拦截器后，后续的请求和响应都会触发对应的函数



MockJS：
作用：产生模拟数据，拦截Ajax
官网：http://mockjs.com/



Moment：
Moment 提供了强大的日期处理能力
官网：http://momentjs.cn/



ECharts：
官网：https://echarts.apache.org/zh




