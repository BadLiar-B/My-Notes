一、设计模式目的：
设计模式是为了更好的代码重用性，可读性，可靠性，可维护性。



二、设计六大原则：
1、单一职责原则（一个方法只做一件事情，请求数据的函数你就不要渲染数据了）
2、里氏替换原则（子类可以扩展父类的功能，但不能改变父类原有的功能）
3、依赖倒转原则（最常用的原则，依赖接口，不依赖方法，底层的东西不用了解，我们只需知道表现就可以。降低耦合度
）
4、接口隔离原则（把大接口拆分小接口，不能一个接口全部实现增删改查）
5、最少知识原则（迪米特法则）（一个接口和一个方法，传入的参数越少越好。降低耦合度的同时也会让复杂程度降低）
6、开放封闭原则（一个软件实体如类、模块和函数应该对扩展开放，对修改关闭；面向扩展开放，面向修改关闭 jquery extend，同时增强代码复用性）



三、设计模式分类：
总体来说设计模式分为三大类：
1、创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
2、结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
3、行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
其实还有两类：并发型模式和线程池模式。



四、常见设计模式：
1、工厂模式
常见的实例化对象模式，工厂模式就相当于创建实例对象的 new，提供一个创建对象的接口。
应用场景：JQuery中的$、Vue.component异步组件、React.createElement等
2、单例模式
保证一个类仅有一个实例，并提供一个访问它的全局访问点，一般登录、购物车等都是一个单例。
应用场景：JQuery中的$、Vuex中的Store、Redux中的Store等
3、适配器模式
用来解决两个接口不兼容问题，由一个对象来包装不兼容的对象，比如参数转换，允许直接访问。
应用场景：Vue的computed、旧的JSON格式转换成新的格式等
4、装饰器模式
在不改变对象自身的基础上，动态的给某个对象添加新的功能，同时又不改变其接口。
利用AOP给函数动态添加功能，即 Function的after 或者 before。
应用场景：ES7 装饰器、Vuex 中1.0版本混入 Vue 时，重写 init 方法、Vue 中数组变异方法实现等
5、代理模式
为其他对象提供一种代理，便以控制对这个对象的访问，不能直接访问目标对象。
应用场景：ES6 Proxy、Vuex中对于getters访问、图片预加载等
6、外观模式
为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易，不符合单一职责原则和开放封闭原则。
应用场景：JS 事件不同浏览器兼容处理、同一方法可以传入不同参数兼容处理等
7、观察者模式
定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。
应用场景：JS 事件、JS Promise、JQuery.$CallBack、Vue watch、NodeJS 自定义事件，文件流等
8、迭代器模式
提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。
可分为：内部迭代器和外部迭代器
内部迭代器： 内部已经定义好迭代规则，外部只需要调用一次即可。应用场景： JQuery.each方法
外部迭代器：必须显示的请求迭代下一个元素。应用场景：JS Iterator、JS Generator
9、状态模式
关键是区分事物内部的状态，事物内部状态往往会带来事物的行为改变，即允许对象在内部状态发生改变时改变它的行为。
应用场景：灯泡状态、红绿灯切换等



五、其他设计模式
0、命令模式
1、组合模式
2、享元模式
3、策略模式
4、职责链模式
5、模板方法模式
6、中介者模式
7、备忘录模式
8、访问者模式
9、解释器模式
10、桥接模式




观察者模式与发布/订阅模式区别：本质上的区别是调度的地方不同
	虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），但是观察者模式是由具体目标调度的，而发布/订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。
	观察者模式：目标和观察者是基类，目标提供维护观察者的一系列方法，观察者提供更新接口。具体观察者和具体目标继承各自的基类，然后具体观察者把自己注册到具体目标里，在具体目标发生变化时候，调度观察者的更新方法。比如有个“天气中心”的具体目标A，专门监听天气变化，而有个显示天气的界面的观察者B，B就把自己注册到A里，当A触发天气变化，就调度B的更新方法，并带上自己的上下文。
	发布/订阅模式：订阅者把自己想订阅的事件注册到调度中心，当该事件触发时候，发布者发布该事件到调度中心（顺带上下文），由调度中心统一调度订阅者注册到调度中心的处理代码。比如有个界面是实时显示天气，它就订阅天气事件（注册到调度中心，包括处理程序），当天气变化时（定时获取数据），就作为发布者发布天气信息到调度中心，调度中心就调度订阅者的天气处理程序。




