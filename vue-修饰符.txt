一、事件修饰符
.prevent：提交事件不在重新加载页面，阻止标签的默认行为
.stop ：阻止单击事件继续传播，也就是阻止冒泡
.capture ：元素自身触发的事件先在此处理，然后交给内部元素进行处理 事件捕获
.self ：只当在 event.target 是当前元素自身时触发处理函数，即事件不是从内部元素触发的
.once ：点击事件将只会触发一次, 不只能对原生 DOM 事件生效，还可以用在自定义组件上
.passive ：当我们在监听元素滚动事件的时候，会一直触发 onscroll 事件，在 pc 端是没啥问题的，但是在移动端，
	会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给 onscroll 事件整了一个 .lazy 修饰符
.native ：修饰符是加在自定义组件的事件上，保证事件能执行
.sync ：当父组件传值进子组件，子组件想要改变这个值时，可以这么做
	父组件里 <children :foo="bar" @update:foo="val => bar = val"></children>
	子组件里this.$emit('update:foo', newValue)复制代码
	sync修饰符的作用就是，可以简写：
	父组件里 <children :foo.sync="bar"></children>
	子组件里this.$emit('update:foo', newValue)


二、表单修饰符（v-model 修饰符） <input v-model.lazy="msg">
.lazy ：在表单输入时不会马上显示在页面，而是等输入完成失去焦点时才会显示在页面
.number ：将输入值转化为数值类型
.trim ：过滤表单输入的首尾空格


三、键盘事件的修饰符<input @keyup.enter="submit">
.enter：回车
.tab：制表键
.delete：捕获 “删除” 和 “退格” 键
.esc：返回
.space：空格
.up：上
.down：下
.left：左
.right：右
.ctrl：ctrl 键
.alt：alt 键
.shift：shift 键
.meta：meta 键


四、鼠标按键修饰符
.left
.right
.middle


五、element 修饰符
对于 elementUI 的 input，我们需要在后面加上 .native, 因为 elementUI 对 input 进行了封装，原生的事件不起作用
<input v-model="form.name" placeholder="昵称" @keyup.enter="submit">
<el-input v-model="form.name" placeholder="昵称" @keyup.enter.native="submit"></el-input>


