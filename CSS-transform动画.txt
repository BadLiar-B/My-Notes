一、2D变形：
1、移动 translate（x，y）
{
  left:50%;
  top:50%;
  transform:translate(-50%,-50%);  /* 走的自己的一半，定位的盒子水平居中 */
}
2、缩放 scale（x，y） ：对元素进行水平和垂直方向的缩放
scaleX
scaleY
3、旋转 rotate（deg） ：对元素进行旋转，正值为顺时针，负值为逆时针
transform:rotate(45deg);
transform-origin：top right；可以调整元素转换变形的原点
4、倾斜 skew（deg，deg）
transform:skew（30deg，0deg）：把元素水平方向上倾斜30度，处置方向保持不变


二、3D变形：
1、rotateX( )：沿着 x 立体旋转
img{
  transition:all 0.5s ease 0s;
}
img:hove {
  transform:rotateX(180deg);
}
2、rotateY( )：沿着 y 轴进行旋转
img {
  transition:all 0.5s ease 0s;
}
img:hove {
  transform:rotateY(180deg);
}
3、rotateZ( )：沿着z轴进行旋转
img {
  transition:all .25s ease-in 0s;
}
img:hover {
  /* transform:rotateX(180deg); */
  /* transform:rotateY(180deg); */
  /* transform:rotateZ(180deg); */
  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */
}


透视（perspective）
透视原理： 近大远小 。
浏览器透视：把近大远小的所有图像，透视在屏幕上。
perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置

translateX(x)
仅水平方向移动**（X 轴移动）

translateY(y)
仅垂直方向移动（Y 轴移动）

translateZ(z)
transformZ 的直观表现形式就是大小变化，实质是 XY 平面相对于视点的远近变化。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了。

translate3d(x,y,z)
[注意]其中，x 和 y 可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z只能设置长度值。

backface-visibility
backface-visibility 属性定义当元素不面向屏幕时是否可见。

