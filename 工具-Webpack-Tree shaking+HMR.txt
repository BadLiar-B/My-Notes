一、Webpack 的 tree shaking 是一种优化技术，用于在打包过程中去除未使用的代码（即无用代码消除），以减少最终生成的代码体积，从而提高性能。

他的原理基于 ES6 模块系统的静态特性，具体如下：
1、ES6 模块系统静态特性：ES6 模块系统在编译时就确定了模块的依赖关系，这意味着模块的导入和导出关系在静态分析阶段就可以确定。
2、作用域分析：Webpack 通过静态分析源码，识别模块与模块之间的依赖关系以及代码中的变量引用。
3、标记未使用代码：Webpack 标记出所有未使用的模块和导出，以及对这些模块和导出的引用。
4、无用代码消除：在生成最终的打包文件时，Webpack 会根据标记的信息，删除未使用的模块和导出，从而减少最终的代码体积。

要启用 Webpack 的 Tree Shaking 功能，需要满足以下条件：
使用 ES6 模块语法进行模块导入和导出，例如使用 import 和 export 关键字。
在 Webpack 的配置中，确保使用了生产环境（mode: 'production'）或启用了相应的优化选项，例如 optimization.usedExports: true。
确保代码中没有副作用的模块，即导入的模块只用于其副作用（例如在模块中直接操作 DOM）而不导出任何内容。这是因为 Tree Shaking 会基于模块的导出来判断其是否被使用。

需要注意的是，Tree Shaking 并不是万能的，它有一些限制和注意事项：
动态导入：Tree Shaking 对于动态导入的模块无法进行静态分析，因此无法剔除这些模块中未使用的代码。
副作用：如果某个模块包含副作用（即不仅仅导出函数、变量等内容，还在模块顶层执行一些其他操作），Webpack 会将整个模块保留下来，无法进行 Tree Shaking。
依赖关系：如果某个模块的导出被其他模块间接引用，即使没有直接使用，Webpack 也无法剔除这个模块。
所以，为了实现更好的 Tree Shaking 效果，还可以结合其他优化手段，如使用代码分割（Code Splitting）和按需加载（Lazy Loading）等。





二、热更新（Hot Module Replacement，简称 HMR）原理是什么？

当开启热更新后，页面中会植入一段 websocket 脚本，同时，开发服务器也会和客户端建立 websocket 通信，当源码发生变动时，webpack 会进行以下处理：
1、webpack 重新打包
2、webpack-dev-server 检测到模块的变化，于是通过 webscoket 告知客户端变化已经发生
3、客户端收到消息后，通过 ajax 发送请求到开发服务器，以过去打包的 hash 值请求服务器的一个 json 文件
4、服务器告诉客户端哪些模块发生了变动，同时告诉客户端这次打包产生的新 hash 值
5、客户端再次用过去的 hash 值，以 JSONP 的方式请求变动的模块
6、服务器响应一个函数调用，用于更新模块的代码
7、此时，模块代码已经完成更新。客户端按照之前的监听配置，执行相应模块变动后的回调函数。

为什么要用？默认情况下，一旦修改了代码，全部代码重新编译刷新，速度慢（全体刷新）
有什么作用？只更新修改的模块，其他模块不变（局部更新）
怎么使用？配置：
devServer: { hot: true }
new webpack.HotModuleReplacementPlugin()



