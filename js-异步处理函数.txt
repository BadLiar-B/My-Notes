JS 是单线程的
        1. 证明 JS 执行是单线程的
          - setImteout() 的回调函数是在主线程执行的
          - 定时器回调函数只有在运行栈中的代码全部执行完毕后才有可能执行
        2. 为什么 JS 要用单线程模式，而不是多线程模式
          - 作为浏览器脚本语言，JS 的主要用途是与用户互动，以及操作 DOM
          - 这决定了它只能是单线程，否则会带来很复杂的同步问题

JS 语言的执行环境是单线程，好处是实现起来简单，坏处是如果有一个任务耗时很长，其余任务需要等待，拖延整个程序的执行，所以需要异步。

异步解决方案
       callback -> promise -> generator -> async + await

1、回调函数（Callback）
	回调函数是解决异步最基本的方式。
	优点：简单，容易理解，实现。
	缺点：不利于维护，容易进入回调地狱

2、promise 对象（ES6）（详情见：ES6-Promise）
	是 commonJs 提出的一种规范，一种模式，可以帮忙管理异步返回的代码，有两种状态，等待（padding）完成（settled），完成状态又分为两类解决（resolved）和拒绝（rejected）

3、generator 生成器 + co
	特点：可以控制函数的执行
	利用关键字 yield，可以把异步操作写在 yield 语句里面，每调用一次 next 方法，则执行一次 yield 语句。如果有 return，return 完成之后就退出了生成器函数，后面如果还有yield操作，则不再执行
	co 是一个为 Node.js 和浏览器打造的基于生成器的流程控制工具，借助于 Promise，你可以使用更加优雅的方式编写非阻塞代码。

4、async + await
	async/await 是基于 Promise 实现的，它不能用于普通的回调函数
	async/await 与 Promise 一样，是非阻塞的
	async/await 使得异步代码看起来像同步代码

5、事件监听

6、发布订阅 publish-subscribe




