网络性能优化：

CDN（内容分发网络）
内容分发网络（CDN）是一组分散在不同地理位置的 Web 服务器，用来给用户更高效的发送内容。
利用 CDN 可以大幅缩减静态资源的访问时间，特别是对于公共库的访问，可以使用知名的 CDN 资源，这样可以实现跨越站点的缓存

缓存
对于除 HTML 外的所有静态资源均可以开启协商缓存，利用构建工具打包产生的文件 hash 值来置换缓存

http2
开启 http2 后，利用其多路复用、头部压缩等特点，充分利用带宽传递大量的文件数据

defer、async
通过 defer 和 async 属性，可以让页面尽早加载 js 文件

prefetch、preload
通过 prefetch 属性，可以让页面在空闲时预先下载其他页面可能要用到的资源
通过 preload 属性，可以让页面预先下载本页面可能要用到的资源

DNS 优化
1、减少 DNS 请求次数
2、缩短 DNS 解析时间（dns-prefetech）（DNS 预解析）
	dns-prefetech：它根据浏览器定义的规则，提前解析之后可能会用到的域名，
	使解析结果缓存到系统缓存中，缩短 DNS 解析时间，进而提高网站的访问速度。		
例：link 标签的 rel 属性设置 dns-prefetch，提前获取域名对应的IP地址

使用多个域名：
主要原因是浏览器对同一个域下的 TCP 连接数是有限制的，这样就导致某个网页如果外部资源多了，比如图片很多的网页，在解析页面时，由于 TCP 连接数受限，就无法同时发起多个下载连接，无法充分利用带宽资源。
因此，可以把静态资源放到多个域名下，这样就绕开了连接数的限制，做到了并发下载。
使用不同的域名可以最大化下载线程，但注意保持在 2~4 个域名内，以避免 DNS 查询损耗。

多个静态资源域
对于不使用 http2 的场景，将相对独立的静态资源分到多个域中保存，可以让浏览器同时开启多个 TCP 连接，并行下载

避免图片 src 为空：
虽然 src 属性为空字符串，但浏览器仍然会向服务器发起一个 http 请求

雪碧图
对于不使用 http2 的场景，可以将多个图片合并为雪碧图，以达到减少文件的目的

优化打包体积
利用一些工具压缩、混淆最终打包代码，减少包体积

多目标打包
利用一些打包插件，针对不同的浏览器打包出不同的兼容性版本，这样一来，每个版本中的兼容性代码就会大大减少，从而减少包体积

压缩
现代浏览器普遍支持压缩格式，因此服务端的各种文件可以压缩后再响应给客户端，只要解压时间小于优化的传输时间，压缩就是可行的
	压缩组件通过减少 HTTP 请求产生的响应包的大小，从而降低传输时间的方式来提高性能。
	Web 客户端可以通过 HTTP 请求中的 Accept-Encoding 头来标识对压缩的支持，
	如果 Web 服务器看到请求中的这个头，就会使用客户端列出的方法中的一种来压缩响应。
	Web 服务器通过响应中的 Content-Encoding 头来告知 Web 客户端使用哪种方法进行的压缩。
	目前许多网站通常会压缩 HTML 文档，脚本和样式表的压缩也是值得的。




